--- xray.py	2017-08-31 17:04:46.000000000 -0700
+++ xray.py.new	2017-08-31 17:07:20.000000000 -0700
@@ -25,6 +25,7 @@
 
 from fleece import log
 
+TESTING = False
 LOGGER = log.get_logger('fleece.xray')
 
 XRAY_DAEMON_HEADER = {'format': 'json', 'version': 1}
@@ -121,21 +122,45 @@
 
 def send_segment_document_to_xray_daemon(segment_document):
     """Format and send document to the X-Ray Daemon."""
+    NoDaemon = False
     try:
         xray_daemon = get_xray_daemon()
     except XRayDaemonNotFoundError:
-        LOGGER.error('X-Ray Daemon not running, skipping send')
-        return
-
+        #LOGGER.error('X-Ray Daemon not running, skipping send')
+        #return
+        NoDaemon = True
+
+    doc=json.dumps(
+       segment_document,
+       ensure_ascii=False,
+       cls=StringJSONEncoder,
+    )
     message = u'{header}\n{document}'.format(
         header=json.dumps(XRAY_DAEMON_HEADER),
-        document=json.dumps(
-            segment_document,
-            ensure_ascii=False,
-            cls=StringJSONEncoder,
-        ),
+        document=doc
+    )
+
+    print("storing msg: {}\n".format(doc))
+    import boto3
+    dynamodb = boto3.resource('dynamodb', region_name='us-west-2')
+    table = dynamodb.Table('gammaRays')
+    tail = '{}'.format(str(uuid.uuid4())[:8])
+    if 'spotReqID' in os.environ: #this will be set to 'unknown' if outside of lambda
+        reqID = '{}:{}'.format(os.environ['spotReqID'],tail)
+    else:
+        reqID = tail
+    ts = time.time() * 1000 #msecs
+    tsint = int(round(ts))
+    table.put_item( Item={
+        'reqID': reqID,
+        'ts': tsint,
+        'payload': doc,
+        }
     )
 
+    if NoDaemon:
+        return
+
     send_data_on_udp(
         ip_address=xray_daemon.ip_address,
         port=xray_daemon.port,
@@ -236,7 +261,15 @@
         # Request not sampled by X-Ray, let's get to the call
         # immediately.
         LOGGER.debug('Request not sampled by X-Ray, skipping trace')
-        return wrapped(*args, **kwargs)
+        if TESTING or 'spotReqID' in os.environ:
+            #SpotWrap version/run, skip gammaRays table write
+            if args and len(args) > 1:
+                if args[0] == 'PutItem': 
+                    obj = args[1]
+                    if 'TableName' in obj and obj['TableName'] == 'gammaRays':
+                        return wrapped(*args, **kwargs)
+        else:
+            return wrapped(*args, **kwargs)
 
     start_time = time.time()
     error = False
@@ -363,6 +396,21 @@
         return instance._service_model.metadata['endpointPrefix']
     return instance._service_model.metadata['serviceAbbreviation']
 
+#CJK:
+def fixup_kwargs(kwargs,arn,reqID,replace,noPayload=False):
+    if noPayload:
+        js = {}
+        replace = False #insurance
+    else:
+        js = json.loads(kwargs['Payload'])
+
+    sarn = arn.split(":")
+    arn = sarn[6]
+    if replace:
+        js['eventSource'] += ':lib:invokeCLI:{}:{}'.format(arn,reqID)
+    else:
+        js['eventSource'] = 'lib:invokeCLI:{}:{}'.format(arn,reqID)
+    kwargs['Payload'] = json.dumps(js)
 
 def extract_aws_metadata(wrapped, instance, args, kwargs, return_value):
     """Provide AWS metadata for improved visualization.
@@ -377,6 +425,7 @@
         kwargs=kwargs,
         response=response,
     )
+
     if 'operation_name' in kwargs:
         operation_name = kwargs['operation_name']
     else:
@@ -402,6 +451,35 @@
         metadata['aws']['table_name'] = kwargs['TableName']
     if 'QueueUrl' in kwargs:
         metadata['aws']['queue_url'] = kwargs['QueueUrl']
+    #CJK
+    myArn = 'unknown'
+    if 'myArn' in os.environ:
+        myArn = os.environ['myArn']
+    reqID = 'unknown'
+    if 'spotReqID' in os.environ: #this will be set to 'unknown' if outside of lambda
+        reqID = os.environ['spotReqID']
+    metadata['aws']['reqID'] = reqID
+    if 'Item' in kwargs:
+        metadata['aws']['item'] = kwargs['Item']
+    if 'Bucket' in kwargs:
+        metadata['aws']['bucket'] = kwargs['Bucket']
+    if 'Key' in kwargs:
+        metadata['aws']['key'] = kwargs['Key']
+    if 'TableName' in kwargs:
+        metadata['aws']['table_name'] = kwargs['TableName']
+    if 'FunctionName' in kwargs:
+        metadata['aws']['function_name'] = kwargs['FunctionName']
+    if 'TopicArn' in kwargs:
+        metadata['aws']['topic_arn'] = kwargs['TopicArn']
+    if 'Subject' in kwargs:
+        metadata['aws']['subject'] = kwargs['Subject']
+    if 'Message' in kwargs:
+        metadata['aws']['message'] = kwargs['Message']
+    if 'Payload' in kwargs:
+        if 'eventSource' in kwargs['Payload']:
+            fixup_kwargs(kwargs,myArn,reqID,True)
+        else:
+            fixup_kwargs(kwargs,myArn,reqID,False)
 
     if response_metadata is not None:
         metadata['http'] = {
