--- client.py	2017-09-03 14:41:24.000000000 -0700
+++ client.py.new	2017-09-03 14:44:19.000000000 -0700
@@ -12,6 +12,7 @@
 # language governing permissions and limitations under the License.
 import logging
 import functools
+import os,boto3,time,uuid,json
 
 from botocore import waiter, xform_name
 from botocore.auth import AUTH_TYPE_MAPS
@@ -41,7 +42,17 @@
 
 logger = logging.getLogger(__name__)
 
-
+#GammaRay
+def fixup_kwargs(kwargs,arn,reqID,noPayload=False):
+    #add eventSource with the calling function's requestID to be able to link caller and callee
+    if noPayload:
+        js = {}
+    else:
+        js = json.loads(kwargs['Payload'])
+    sarn = arn.split(":")
+    arn = sarn[6]
+    js['eventSource'] = 'lib:invokeCLI:{}:{}'.format(arn,reqID)
+    kwargs['Payload'] = json.dumps(js)
 class ClientCreator(object):
     """Creates client objects for a service."""
     def __init__(self, loader, endpoint_resolver, user_agent, event_emitter,
@@ -306,8 +317,62 @@
             if args:
                 raise TypeError(
                     "%s() only accepts keyword arguments." % py_operation_name)
+            #GammaRay
+            # SpotWrap additions to capture AWS API calls
+            reqID = 'unknown'
+            tname = 'spotFns'
+            if 'spotReqID' in os.environ:
+                reqID = os.environ['spotReqID']
+            if 'gammaTable' in os.environ:
+                tname = os.environ['gammaTable']
+            # Skip it all if its a put to the GammaRay table name 
+            tail = '12345'
+            ts = 0.0
+            if not(reqID == 'unknown' or (operation_name == 'PutItem' and kwargs['TableName'] == tname)):
+                tail = '{}'.format(str(uuid.uuid4())[:8])
+                if DDBTABLE is None:
+                    if 'gammaRegion' in os.environ:
+                        reg = os.environ['gammaRegion']
+                    dynamodb = boto3.resource('dynamodb', region_name=reg)
+                    DDBTABLE = dynamodb.Table(tname)
+                #create the record
+                payload = 'start:{}:{}:'.format(operation_name,self._endpoint)
+                for k in kwargs:
+                    payload += ':{}:{}'.format(k,kwargs[k])
+                #insert this caller's reqID to the callee's payload for tracing
+                if 'Payload' in kwargs:
+                    if 'eventSource' in kwargs['Payload']:
+                        fixup_kwargs(kwargs,myArn,reqID,True)
+                    else:
+                        fixup_kwargs(kwargs,myArn,reqID,False)
+
+                reqID = '{}:{}'.format(os.environ['spotReqID'],tail)
+                ts = time.time() * 1000 #msecs
+                tsint = int(round(ts))
+                DDBTABLE.put_item( Item={
+                    'reqID': reqID,
+                    'ts': tsint,
+                    'gr_payload': payload,
+                    }
+                )
             # The "self" in this scope is referring to the BaseClient.
-            return self._make_api_call(operation_name, kwargs)
+            retn = self._make_api_call(operation_name, kwargs)
+
+            #GammaRay
+            if not(reqID == 'unknown' or (operation_name == 'PutItem' and kwargs['TableName'] == tname)):
+                reqID = '{}:{}'.format(os.environ['spotReqID'],tail)
+                tsend = time.time() * 1000 #msecs
+                tsint = int(round(tsend))
+                diff = tsend-ts
+                DDBTABLE.put_item( Item={
+                    'reqID': reqID,
+                    'ts': tsint,
+                    'payload': 'SDKend:{}'.format(str(diff)),
+                    }
+                )
+
+
+            return retn
 
         _api_call.__name__ = str(py_operation_name)
 
