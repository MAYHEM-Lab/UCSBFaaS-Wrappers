#DO NOT CHANGE this file (setupApps depends on them)
import boto3,json,logging,os,sys,importlib,zipfile,traceback
import time,uuid
sessionID = str(uuid.uuid4())

def callIt(event,context):
    #DO NOT CHANGE the following two lines (setupApps depends on them)
    #create a new file if changes are necessary
    import SpotTemplate
    return SpotTemplate.handler(event,context)

def handleRequest(event, context):
    if not event or not context:
        logger.warn('SpotWrapPython::no context or event')
        return {'statusCode':400}
        
    logger = logging.getLogger()
    entry = time.time() * 1000

    sfx = ''
    if not 'nolibload' in event:
        ''' Download the zip file from s3, unzip it into libdir, 
            put it in the path and reload botocore.client to get the changes.
        '''
        libdir = '/tmp/spotlibs'
        botoname = '{}/botocore'.format(libdir)
        #first check if here (container reuse), if not then load it, else use it
        if not os.path.exists(botoname): 
            bkt = 'XXXX' #do not change this text as it is replaced
            fname = 'YYYY' #do not change this text as it is replaced
            tmpfname = '/tmp/{}'.format(fname)
            s3 = boto3.resource('s3')
            try:
                s3.Bucket(bkt).download_file(fname, tmpfname)
            except Exception as e:
                print('Error, s3 GET exception (unable to download libfile {}/{} to tmp):\n{}'.format(bkt,fname,e))
            with zipfile.ZipFile(tmpfname, 'r') as z:
                z.extractall(path=libdir)
    
        sys.path.insert(0, libdir)
        import botocore
        importlib.invalidate_caches()
        importlib.import_module('botocore')
        importlib.reload(botocore)
        importlib.reload(botocore.client)
    else: 
        sfx = 'nolibload'

    reqID = 'unknown'
    arn = 'unknown'
    if context:
        reqID = context.aws_request_id
        arn = context.invoked_function_arn
    payload = 'pl:{}'.format(arn)
    if 'eventSource' in event:
        payload += ':es:{}'.format(event['eventSource'])
    if 'Records' in event:
        recs = event['Records']
        parent_obj = recs[0]
        if 'dynamodb' in parent_obj: 
            obj = parent_obj['dynamodb']
            payload += ':es:ddb'
            subobj = obj['Keys']
            payload += ':keys'
            for key in subobj:
                payload += ':{}'.format(key)
            payload += ':op:{}'.format(parent_obj['eventName'])
        elif 'Sns' in parent_obj: 
            obj = parent_obj['Sns']
            payload += ':es:sns'
            payload += ':sub:{}'.format(obj['Subject'])
            payload += ':op:{}'.format(obj['TopicArn'])
        elif 's3' in parent_obj: 
            payload += ':es:s3'
            obj = parent_obj['s3']
            subobj = obj['bucket']
            payload += ':bkt:{}'.format(subobj['name'])
            subobj = obj['object']
            payload += ':key:{}'.format(subobj['key'])
            payload += ':op:{}'.format(parent_obj['eventName'])

    dynamodb = boto3.resource('dynamodb', region_name='ZZZZ')
    table = dynamodb.Table('QQQQ')
    unique_str = str(uuid.uuid4())[:8]
    entstr = 'entry{}'.format(unique_str)
    exstr = 'exit{}'.format(unique_str)
    tsint = int(round(time.time() * 1000)) #msecs in UTC
    reqID += ':{}'.format(entstr)
    table.put_item( Item={
        'reqID': reqID,
        'ts': tsint,
        'payload': payload
        }
    )

    os.environ['spotReqID'] = reqID
    os.environ['myArn'] = arn
    os.environ['gammaTable'] = 'QQQQ'
    os.environ['gammaRegion'] = 'ZZZZ'
    errorstr = 'SpotWrapPython'
    respObj = {}
    if 'nowrap' in event:
        sfx += ':nowrap'
        respObj = None
    logger.warn('SpotWrapPython::reqID:{}:{}'.format(reqID,sfx))
    ERR = False
    returnObj = {}
    status = '200'
    delta = 0
    wrappedentry = time.time() * 1000
    try: 
        if 'nowrap' not in event:
            respObj = callIt(event,context)
        if not respObj:
            respObj = {}
            respObj['SpotWrapMessage'] = 'NoResponseReturned'
        if 'statusCode' in respObj:
            status = respObj['statusCode']
            if status != '200':
                ERR = True
                if 'exception' in respObj:
                    errorstr += ':{}:status:{}'.format(respObj['exception'],errcode)
                else:
                    errorstr += ':error_unknown:status:{}'.format(errcode)
    except Exception as e:
        _, _, exc_traceback = sys.exc_info()
        msg = repr(traceback.format_tb(exc_traceback))
        errorstr += ':SpotWrap_exception:{}:{}:status:400'.format(e,msg)
        ERR = True
    finally: 
        if errorstr != 'SpotWrapPython':
            print('SpotWrapPy caught error: {}'.format(errorstr))
        exittime = time.time()*1000
        delta = exittime - wrappedentry
        duration = int(round(delta))
        tsint = int(round(exittime)) #msecs in UTC
        reqID += ':{}'.format(exstr)
        payload = 'end'
        table.put_item( Item={
            'reqID': reqID,
            'ts': tsint,
            'payload': payload
            }
        )

    if not respObj: 
        respObj = {}
    if ERR:
        status = '400'
        respObj['SpotWrapError']=errorstr
    returnObj['statusCode'] = status
    returnObj['body'] = respObj
    exittime = time.time() * 1000
    selfdelta = exittime - entry
    logger.warn('SpotWrapPython::handleRequest:TIMER:CALL:{}:WRAPPEDCALL:{}:status:{}:response:{}'.format(selfdelta,delta,status,respObj))
    return returnObj

