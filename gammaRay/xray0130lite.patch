--- xray.py	2017-09-08 08:33:44.000000000 -0700
+++ xray.py.new	2017-09-09 13:20:35.000000000 -0700
@@ -25,6 +25,12 @@
 
 from fleece import log
 
+#GammaRay
+import boto3
+TESTING = False
+DDBTABLE = None
+GAMMATABLE = [ 'PutItem', 'UpdateItem', 'DeleteItem', 'BatchWriteItem', 'PutObject', 'DeleteObject', 'PostObject', 'Publish', 'Invoke' ]
+
 LOGGER = log.get_logger('fleece.xray')
 
 XRAY_DAEMON_HEADER = {'format': 'json', 'version': 1}
@@ -120,27 +126,62 @@
 
 
 def send_segment_document_to_xray_daemon(segment_document):
+    global DDBTABLE
     """Format and send document to the X-Ray Daemon."""
+    NoDaemon = False
     try:
         xray_daemon = get_xray_daemon()
     except XRayDaemonNotFoundError:
-        LOGGER.error('X-Ray Daemon not running, skipping send')
-        return
-
+        #LOGGER.error('X-Ray Daemon not running, skipping send')
+        #return
+        NoDaemon = True
+
+    if 'spotReqID' in os.environ and 'http' in segment_document:
+        #no gr_payload in object yet b/c only formed on aws API call
+        segment_document['gr_payload']=segment_document['http']
+
+    doc=json.dumps(
+       segment_document,
+       ensure_ascii=False,
+       cls=StringJSONEncoder,
+    )
     message = u'{header}\n{document}'.format(
         header=json.dumps(XRAY_DAEMON_HEADER),
-        document=json.dumps(
-            segment_document,
-            ensure_ascii=False,
-            cls=StringJSONEncoder,
-        ),
+        document=doc
     )
 
-    send_data_on_udp(
-        ip_address=xray_daemon.ip_address,
-        port=xray_daemon.port,
-        data=message,
-    )
+    #GammaRay
+    if 'spotReqID' in os.environ:
+        idx = doc.find('gr_payload') #gr_payload is only added if in GAMMATABLE
+        if idx > -1:
+            if DDBTABLE is None:
+                tname = 'gammaRays'
+                if 'gammaTable' in os.environ:
+                    tname = os.environ['gammaTable']
+                if 'gammaRegion' in os.environ:
+                    reg = os.environ['gammaRegion']
+                dynamodb = boto3.resource('dynamodb', region_name=reg)
+                DDBTABLE = dynamodb.Table(tname)
+            tail = '{}'.format(str(uuid.uuid4())[:8])
+            reqID = '{}:{}'.format(os.environ['spotReqID'],tail)
+            ts = time.time() * 1000 #msecs
+            tsint = int(round(ts))
+            DDBTABLE.put_item( Item={
+                'reqID': reqID,
+                'ts': tsint,
+                'payload': doc,
+                }
+            )
+
+    if NoDaemon:
+        return
+
+    if not ('PutItem' in message and 'gammaRays' in message):
+        send_data_on_udp(
+            ip_address=xray_daemon.ip_address,
+            port=xray_daemon.port,
+            data=message,
+        )
 
 
 def send_subsegment_to_xray_daemon(subsegment_id, parent_id,
@@ -236,7 +277,30 @@
         # Request not sampled by X-Ray, let's get to the call
         # immediately.
         LOGGER.debug('Request not sampled by X-Ray, skipping trace')
-        return wrapped(*args, **kwargs)
+        if TESTING or 'spotReqID' in os.environ:
+            #SpotWrap version/run, skip gammaRays table write
+            if args and len(args) > 1:
+                if args[0] == 'PutItem': 
+                    obj = args[1]
+                    tname = "unknown"
+                    if 'gammaTable' in os.environ:
+                        tname = os.environ['gammaTable']
+                    if 'TableName' in obj and obj['TableName'] == tname:
+                        return wrapped(*args, **kwargs)
+        else:
+            print('Request not sampled by X-Ray, skipping trace')
+            return wrapped(*args, **kwargs)
+    else: #sampled
+        if TESTING or 'spotReqID' in os.environ:
+            #SpotWrap version/run, skip gammaRays table write
+            if args and len(args) > 1:
+                if args[0] == 'PutItem': 
+                    obj = args[1]
+                    tname = "unknown"
+                    if 'gammaTable' in os.environ:
+                        tname = os.environ['gammaTable']
+                    if 'TableName' in obj and obj['TableName'] == tname:
+                        return wrapped(*args, **kwargs)
 
     start_time = time.time()
     error = False
@@ -363,6 +427,17 @@
         return instance._service_model.metadata['endpointPrefix']
     return instance._service_model.metadata['serviceAbbreviation']
 
+#GammaRay
+def fixup_kwargs(kwargs,arn,reqID,noPayload=False):
+    if noPayload:
+        js = {}
+    else:
+        js = json.loads(kwargs['Payload'])
+
+    sarn = arn.split(":")
+    arn = sarn[6]
+    js['eventSource'] = 'lib:invokeCLI:{}:{}'.format(arn,reqID)
+    kwargs['Payload'] = json.dumps(js)
 
 def extract_aws_metadata(wrapped, instance, args, kwargs, return_value):
     """Provide AWS metadata for improved visualization.
@@ -377,6 +452,7 @@
         kwargs=kwargs,
         response=response,
     )
+
     if 'operation_name' in kwargs:
         operation_name = kwargs['operation_name']
     else:
@@ -388,7 +464,6 @@
         kwargs = args[1]
 
     region_name = instance._client_config.region_name
-
     response_metadata = response.get('ResponseMetadata')
 
     metadata = {
@@ -402,7 +477,27 @@
         metadata['aws']['table_name'] = kwargs['TableName']
     if 'QueueUrl' in kwargs:
         metadata['aws']['queue_url'] = kwargs['QueueUrl']
-
+    #GammaRay
+    if 'spotReqID' in os.environ: #this will be set to 'unknown' if outside of lambda
+        #Only create gr_payload if operation_name is in the list GAMMATABLE
+        if operation_name in GAMMATABLE:
+            reqID = os.environ['spotReqID']
+            myArn = 'unknown'
+            if 'myArn' in os.environ:
+                myArn = os.environ['myArn']
+            payload = 'payload:{}'.format(myArn)
+            for k in kwargs:
+                if k == 'Body':
+                    continue
+                payload += ':{}:{}'.format(k,kwargs[k])
+            metadata['aws']['gr_payload']= payload
+            #insert this caller's reqID to the callee's payload for tracing
+            if 'Payload' in kwargs:
+                if 'eventSource' in kwargs['Payload']:
+                    fixup_kwargs(kwargs,myArn,reqID,True)
+                else:
+                    fixup_kwargs(kwargs,myArn,reqID,False)
+    
     if response_metadata is not None:
         metadata['http'] = {
             'response': {
