--- client.py	2017-08-03 11:19:40.000000000 -0700
+++ client.py.new	2017-08-03 11:22:47.000000000 -0700
@@ -10,7 +10,8 @@
 # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 # ANY KIND, either express or implied. See the License for the specific
 # language governing permissions and limitations under the License.
-import logging
+import logging,os,boto3,time,uuid,json
+from datetime import datetime, timezone
 import functools
 
 from botocore import waiter, xform_name
@@ -41,6 +42,18 @@
 
 logger = logging.getLogger(__name__)
 
+def fixup_kwargs(kwargs,arn,replace,noPayload=False):
+    if noPayload:
+        js = {}
+        replace = False #insurance
+    else:
+        js = json.loads(kwargs['Payload'])
+
+    if replace:
+        js['eventSource'] += 'lib:invokeCLI:{}'.format(arn)
+    else:
+        js['eventSource'] = 'lib:invokeCLI:{}'.format(arn)
+    kwargs['Payload'] = json.dumps(js)
 
 class ClientCreator(object):
     """Creates client objects for a service."""
@@ -306,6 +319,77 @@
             if args:
                 raise TypeError(
                     "%s() only accepts keyword arguments." % py_operation_name)
+
+            # SpotWrap additions to capture AWS API calls
+            reqID = 'unknown'
+            if 'spotReqID' in os.environ: #this will be set to 'unknown' if outside of lambda
+                reqID = os.environ['spotReqID']
+            #skip if its a write to the dynamodb spot table (infinite loop)
+            if not(reqID == 'unknown' or (operation_name == 'PutItem' and kwargs['TableName'] == 'spotFns')): 
+                myArn = 'unknown'
+                if 'myArn' in os.environ:
+                    myArn = os.environ['myArn']
+                dynamodb = boto3.resource('dynamodb', region_name='us-west-2')
+                table = dynamodb.Table('spotFns')
+                msg = 'SW'
+                eventOp = 'unknown'
+                if operation_name == 'PutObject' or operation_name == 'GetObject': #s3
+                    msg +=  ':Bkt:{}:Key:{}'.format(kwargs['Bucket'],kwargs['Key'])
+                    #also kwargs['Body'] for Put
+                    if operation_name == 'GetObject':
+                        eventOp = 'os_read'
+                    if operation_name == 'PutObject':
+                        eventOp = 'os_write'
+                elif operation_name == 'PutItem' or operation_name == 'GetItem': #dynamodb
+                    msg +=  ':TableName:{}'.format(kwargs['TableName'])
+                    if operation_name == 'GetItem':
+                        msg +=  ':Key:{}'.format(str(kwargs['Key']))
+                        eventOp = 'db_read'
+                    else:
+                        msg +=  ':Item:{}'.format(str(kwargs['Item']))
+                        eventOp = 'db_write'
+                elif operation_name == 'Invoke':
+                    msg +=  ':FunctionName:{}'.format(kwargs['FunctionName'])
+                    eventOp = 'invoke'
+		    #also: kwargs['Payload']
+                    if 'Payload' in kwargs:
+                        if 'eventSource' in kwargs['Payload']:
+                            fixup_kwargs(kwargs,myArn,True)
+                        else: 
+                            fixup_kwargs(kwargs,myArn,False)
+                    else:
+                        fixup_kwargs(kwargs,myArn,False,True)
+                elif operation_name == 'Publish':
+                    eventOp = 'sns_publish'
+                    msg += 'sns:Publish'
+                    if 'TopicArn' in kwargs:
+                        msg += ':Topic:{}'.format(kwargs['TopicArn'])
+                    if 'Subject' in kwargs:
+                        msg += ':Subject:{}'.format(kwargs['Subject'])
+                    if 'Message' in kwargs:
+                        msg += ':Message:{}'.format(kwargs['Message'])
+                else:
+                    msg += 'SpotWrapError:unknown_op:{}:{}'.format(operation_name,str(kwargs))
+                reqID += ':{}:{}'.format(operation_name,str(uuid.uuid4())[:8])
+                ts = time.time() * 1000 #msecs
+                tsint = int(round(ts))
+                table.put_item( Item={
+                    'ts': tsint,
+                    'requestID': reqID,
+                    'thisFnARN': myArn,
+                    'caller': 'unknown',
+                    'eventSource': 'unknown',
+                    'eventOp': eventOp,
+                    'region': 'unknown',
+                    'accountID': 'unknown',
+                    'sourceIP': 'unknown',
+                    'message': msg,
+                    'duration': 0,
+                    'error': 'unknown',
+                    }
+               )
+
+
             # The "self" in this scope is referring to the BaseClient.
             return self._make_api_call(operation_name, kwargs)
 
